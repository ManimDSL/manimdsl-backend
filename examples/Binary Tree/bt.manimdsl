fun inorder(head: Node<number>, arr2: Array<number>, i: number): number {
    if (head == null) {
        return i;
    } else {
        let j = inorder(head.left, arr2, i);
        arr2[j] = head.value;
        return inorder(head.right, arr2, j+1);
    }
}

fun buildBST(i: number, j: number, arr: Array<number>): Node<number> {
    if (i == j) {
        return Node<number>(arr[i]);
    }
    if (i > j) {
        return null;
    }
    let m = i+j;
    m = m/2;
    let head = Node<number>(arr[m]);
    head.left = buildBST(i, m-1, arr);
    head.right = buildBST(m+1, j, arr);
    return head;
}

let arr = Array<number>(7) {1, 2, 3, 4, 5, 6, 7};
stepOver {
let head = Node<number>(4);
let tree = Tree<Node<number>>(head);
head.left = buildBST(0, 2, arr);
head.right = buildBST(4, arr.size()-1, arr);
}
let arr2 = Array<number>(7) {-1, -1, -1, -1, -1, -1, -1};
inorder(tree.root, arr2, 0);

